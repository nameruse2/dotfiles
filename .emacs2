\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define and initialise package repositories
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; use-package to simplify the config file
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Basic quality of life improvements
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq-default word-wrap t) ;; Line wrapping
(setq ring-bell-function 'ignore)
(when (display-graphic-p) (set-fringe-mode 10)) ;; Breathing room

;; Y or N instead of needing yes or no
(fset 'yes-or-no-p 'y-or-n-p)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator #x2501
      org-agenda-compact-blocks t
      org-agenda-files '("~/Documents/notes/")
      org-agenda-custom-commands '(("w" todo "WAITING" nil))
      org-log-done 'time
      org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "DONE(d)"))
      org-refile-targets '((org-agenda-files :maxlevel . 5))
      org-refile-use-outline-path 'file
      org-archive-location "~/Documents/notes/archive.org::"
      org-log-into-drawer t
      org-capture-templates
      '(("n" "note" entry (file "~/Documents/notes/Inbox.org") "" nil nil)
	("t" "todo" entry (file "~/Documents/notes/Inbox.org") "* TODO %^{Title}" )))

(fido-vertical-mode t)


;;;;;;;;;;
;; THEME
;;;;;;;;;;
  (use-package gruvbox-theme
    :ensure nil
    :config
    (progn
      (defvar after-load-theme-hook nil
        "Hook run after a color theme is loaded using `load-theme'.")
      (defadvice load-theme (after run-after-load-theme-hook activate)
        "Run `after-load-theme-hook'."
        (run-hooks 'after-load-theme-hook))
      (defun customize-gruvbox ()
        "Customize gruvbox theme"
        (if (member 'gruvbox custom-enabled-themes)
            (custom-theme-set-faces
             'gruvbox
             '(cursor                 ((t (:foreground "#928374"))))
             '(org-block              ((t (:foreground "#ebdbb2":background "#1c2021" :extend t))))
             '(org-block-begin-line   ((t (:inherit org-block :background "#1d2021" :foreground "#665c54" :extend t))))
             '(org-block-end-line     ((t (:inherit org-block-begin-line))))
             '(org-document-info      ((t (:foreground "#d5c4a1" :weight bold))))
             '(org-document-info-keyword    ((t (:inherit shadow))))
             '(org-document-title     ((t (:foreground "#fbf1c7" :weight bold :height 1.4))))
             '(org-meta-line          ((t (:inherit shadow))))
             '(org-target             ((t (:height 0.7 :inherit shadow))))
             '(org-link               ((t (:foreground "#b8bb26" :background "#32302f" :overline nil))))  ;; 
             '(org-indent             ((t (:inherit org-hide))))
             '(org-indent             ((t (:inherit (org-hide fixed-pitch)))))
             '(org-footnote           ((t (:foreground "#8ec07c" :background "#32302f" :overline nil))))
             '(org-ref-cite-face      ((t (:foreground "#fabd2f" :background "#32302f" :overline nil))))  ;; 
             '(org-ref-ref-face       ((t (:foreground "#83a598" :background "#32302f" :overline nil))))
             '(org-ref-label-face     ((t (:inherit shadow :box t))))
             '(org-drawer             ((t (:inherit shadow))))
             '(org-property-value     ((t (:inherit org-document-info))) t)
             '(org-tag                ((t (:inherit shadow))))
             '(org-date               ((t (:foreground "#83a598" :underline t))))
             '(org-verbatim           ((t (:inherit org-block :background "#3c3836" :foreground "#d5c4a1"))))
             '(org-code               ((t (:inherit org-verbatim :background "#3c3836" :foreground "#fe8019"))))
             '(org-quote              ((t (:inherit org-block :slant italic))))
             '(org-level-1            ((t (:foreground "#83a598" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-level-2            ((t (:foreground "#8ec07c" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Aqua
             '(org-level-3            ((t (:foreground "#b8bb26" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Green
             '(org-level-4            ((t (:foreground "#fabd2f" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Yellow
             '(org-level-5            ((t (:foreground "#fe8019" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Orange
             '(org-level-6            ((t (:foreground "#fb4934" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Red
             '(org-level-7            ((t (:foreground "#d3869b" :background "#282828" :weight bold :height 1.1 :overline nil :extend t)))) ;; Blue
             '(org-headline-done      ((t (:foreground "#928374" :background "#282828" :weight bold :overline nil :extend t)))) ;; Gray
             '(org-ellipsis           ((t (:inherit shadow :height 1.0 :weight bold :extend t)))) 
             '(org-table              ((t (:foreground "#d5c4a1" :background "#3c3836"))))

             ;; Doom-modeline settings
             '(doom-modeline-evil-insert-state   ((t (:foreground "#b8bb26" :weight bold)))) ;; Green
             '(doom-modeline-evil-emacs-state    ((t (:foreground "#b16286" :weight bold)))) ;; Purple
             '(doom-modeline-evil-normal-state   ((t (:foreground "#83a598" :weight bold)))) ;; Blue
             '(doom-modeline-evil-visual-state   ((t (:foreground "#fbf1c7" :weight bold)))) ;; Beige
             '(doom-modeline-evil-replace-state  ((t (:foreground "#fb4934" :weight bold)))) ;; Red
             '(doom-modeline-evil-operator-state ((t (:foreground "#fabd2f" :weight bold)))) ;; Yellow
             '(mode-line                         ((t (:background "#504945" :foreground "#d5c4a1"))))
             '(mode-line-inactive                ((t (:background "#3c3836" :foreground "#7c6f64"))))
             '(link                              ((t (:foreground "#b8bb26" :overline t))))

             '(line-number                       ((t (:background "#32302f" :foreground "#665c54"))))
             ;; Mu4E mail client faces
             '(mu4e-header-face                  ((t (:foreground "#d5c4a1" :background "#282828"))))
             '(mu4e-replied-face                 ((t (:inherit mu4e-header-face :foreground "#b8bb26"))))
             '(mu4e-draft-face                   ((t (:inherit mu4e-header-face :foreground "#fabd2f"))))
             '(mu4e-link-face                    ((t (:inherit mu4e-face :foreground "#8ec07c" :underline t))))
             '(mu4e-forwarded-face               ((t (:inherit mu4e-header-face :foreground "#80c07c"))))
             '(mu4e-flagged-face                 ((t (:inherit mu4e-header-face))))
             '(mu4e-header-highlight-face        ((t (:underline nil :background "#3c3836"))))
             '(mu4e-unread-face                  ((t (:foreground "#fbf1c7" :weight bold))))  ;; Originally #83a598 
             '(mu4e-cited-1-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-2-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-3-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-4-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-5-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-6-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-7-face                 ((t (:foreground "#b16286" :slant italic))))
             '(mu4e-cited-8-face                 ((t (:foreground "#458588" :slant italic))))
             '(mu4e-cited-9-face                 ((t (:foreground "#689d6a" :slant italic))))
             '(mu4e-cited-10-face                 ((t (:foreground "#98971a" :slant italic))))
             '(mu4e-cited-11-face                 ((t (:foreground "#d79921" :slant italic))))
             '(mu4e-cited-12-face                 ((t (:foreground "#d65d0e" :slant italic))))
             '(mu4e-cited-13-face                 ((t (:foreground "#cc241d" :slant italic))))
             '(mu4e-cited-14-face                 ((t (:foreground "#b16286" :slant italic))))
             '(pdf-view-midnight-colors           '("#d5c4a1" . "#282828"))
             )
            (setq org-n-level-faces 8)
          ) ;; test
        )  
      (add-hook 'after-load-theme-hook 'customize-gruvbox)
      )
      (load-theme 'gruvbox t) 
      (enable-theme 'gruvbox)
    )



;;(use-package doom-themes
  ;;:ensure t
  ;;:config
  ;; Global settings (defaults)
  ;;(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;      doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;;(load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  ;;(doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; or for treemacs users
  ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;;(doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  ;;(doom-themes-org-config))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cua-enable-cua-keys t)
 '(cua-mode t)
 '(elfeed-feeds
   '("https://www.icann.org/en/feed/board_materials" "https://www.icann.org/en/blogs" "https://krebsonsecurity.com/feed/"))
 '(package-selected-packages
   '(gruvbox-theme ef-themes markdown-mode elfeed pdf-tools magit doom-themes which-key rainbow-delimiters)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
